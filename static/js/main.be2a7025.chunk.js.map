{"version":3,"sources":["serviceWorker.ts","include/bootstrap.js","actions/all.type.actions.tsx","actions/user.actions.tsx","containers/login/Login.tsx","actions/userList.actions.tsx","components/userList/UpdateUser.tsx","components/userList/DeleteUser.tsx","components/userList/UserRecord.tsx","components/userList/UsersList.tsx","components/header/Header.tsx","actions/reimbursements.actions.tsx","components/reimbursementList/AddReimbursement.tsx","components/reimbursementList/ReimbursementsList.tsx","reducers/loginReducer.tsx","reducers/reimbursementsReducer.tsx","reducers/usersListReducer.tsx","reducers/messageReducer.tsx","reducers/reimbursementPendingReducer.tsx","reducers/userReimbursementReducer.tsx","reducers/reimbursementByPageReducer.tsx","reducers/index.tsx","services/apiUrl.tsx","services/baseService.tsx","services/authenticationService.tsx","sagas/authenticationSaga.tsx","services/reimbursements.service.tsx","sagas/reimbursements.saga.tsx","services/user.service.tsx","sagas/users.saga.tsx","sagas/watchers.tsx","sagas/Start.saga.tsx","store/configureStore.tsx","components/userInfo/UserInfoCard.tsx","components/userInfo/UserInfo.tsx","components/reimbursementsByStatus/resolverButton/ResolveButton.tsx","components/reimbursementsByStatus/PendingReimbursements.tsx","components/reimbursementByUser/ShowReimbursmentsByUserId.tsx","components/reimbursementByUser/UserRecordWithReimbursement.tsx","components/reimbursementByUser/ReimbursementByUser.tsx","components/reimbursementByUser/ReimbursementsByUserID.tsx","components/reimbursementByPage/ReimbursementPage.tsx","components/reimbursementByPage/PaginatorController.tsx","components/reimbursementByPage/ReimbursementByPage.tsx","App.tsx","index.tsx","statics/images/logo.webp"],"names":["Boolean","window","location","hostname","match","Tether","Popper","jquery","$","LOGIN_USER","LOGIN_USER_SUCCESS","LOGIN_USER_ERROR","GET_REIMBURSEMENTS_BY_ID","GET_REIMBURSEMENTS_BY_ID_SUCCESS","ADD_REIMBURSEMENT","ADD_REIMBURSEMENT_SUCCESS","GET_REIMBURSEMENTS_BY_STATUS","GET_REIMBURSEMENTS_BY_STATUS_SUCCESS","UPDATE_REIMBURSEMENT","UPDATE_REIMBURSEMENT_SUCSESS","GET_REIMBURSEMENTS_BY_PAGE","GET_REIMBURSEMENTS_BY_PAGE_SUCCESS","GET_LIST_USERS","GET_LIST_USERS_SUCCESS","UPDATE_USER","UPDATE_USER_SUCCESS","DELETE_USER","DELETE_USER_SUCCESS","SET_MESSAGE","logout","type","payload","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","username","password","messageFromApi","usernameRef","passwordRef","onHandleLogin","e","preventDefault","value","setState","objectSpread","data","loginUserAction","n","React","createRef","localStorage","getItem","history","push","_this2","react_default","a","createElement","className","Alert","classnames","display","loginState","response","message","color","src","logo","alt","onSubmit","id","is-invalid","name","placeholder","ref","input","Component","mapDispatchToProps","updateState","user","types","connect","getAllUsers","UpdateUser","modal","firstnameRef","lastnameRef","emailRef","roleRef","toggle","prevState","updateUser","userToUpdate","userName","firstName","lastName","email","role","updateUserAction","_this$props$user","Fragment","onClick","Modal","isOpen","fade","ModalHeader","ModalBody","htmlFor","required","min","defaultValue","String","Button","mapDispatchProps","DeleteUser","deleteUser","deleteUserAction","UserRecord","userList_UpdateUser","userList_DeleteUser","UsersList","console","log","isAuthenticated","removeItem","list","usersListState","toConsumableArray","map","u","UserRecord_UserRecord","key","Table","striped","colSpan","Spinner","Header","dropdownOpen","dropdownSettings","collapsed","dispatch","toggleSetting","toggleNavbar","Navbar","light","expand","NavbarBrand","to","height","width","NavbarToggler","Collapse","navbar","Nav","NavItem","react_router_dom","rol","Dropdown","nav","DropdownToggle","caret","DropdownMenu","DropdownItem","disabled","divider","userId","inNavbar","right","getReimbursementsByUser","getReimbursementsByPage","page","AddReimbursement","amountRef","descriptionRef","typeRef","clear","submitReimbursement","amount","description","type_id","addReimbursement","buttonLabel","defaultChecked","reimbursementsListState","ReimbursementsList","r","reimbursement_id","submitted_date","substr","status","resolver_name","resolve_date","reimbursementList_AddReimbursement","reimbursementsPendingListState","messages","messageState","initialState","token","undefined","reimbursementList","currentPage","pageCount","pagesUrl","rootReducer","combineReducers","arguments","length","action","newState","reimList","concat","updateItem","newList","filter","deleteId","userReimbursementState","reimbursmentByPageState","newPageState","result","pages","current","url","BaseService","route","Add","item","axios","post","headers","getHeaders","then","resp","catch","Update","patch","Delete","delete","createClass","login","getCurrentLogin","Content-Type","Authorization","JSON","parse","get","AuthenticationService","_BaseService","Authenticate","pwd","setCurrentLogin","inherits","setItem","stringify","loginSaga","authenticationService","_response","regenerator_default","wrap","_context","prev","next","sent","put","t0","stop","_marked","ReimbursementService","getReimbursements","getReimbursementsByStatus","statusId","updateReimbursmentStatus","reimbursement","getReimbursmentByPage","_page","getReimbursementsByUserSaga","reimbursementByIdSaga","addReimbursementSaga","updateReimbursementStatusSaga","reimbursementByPageSaga","reimbursementService","reimbursements_saga_marked","_context2","_marked2","_response2","_context3","_marked3","_response3","_context4","_marked4","_response4","_context5","_marked5","UserService","GetAllUsers","getUserListSaga","updateUserSaga","deleteUserSaga","userService","users_saga_marked","users_saga_marked2","users_saga_marked3","watchActions","takeLatest","watchers_marked","startForman","fork","Start_saga_marked","store","configureStore","sagaMiddleware","createSagaMiddleware","createStore","compose","applyMiddleware","logger","__REDUX_DEVTOOLS_EXTENSION__","runSaga","run","rootSaga","UserInfoCard","CardTitle","UserInfo","components_userInfo_UserInfoCard","ResolveButton","changeState","statusToChange","newReimbursment","status_id","updatePendingReimbursementStatus","fa-thumbs-up","fa-thumbs-down","text-success","text-danger","PendingReimbursements","author_name","resolverButton_ResolveButton","ShowReimbursmentsByUserId","redirect","setReimbursementUser","UserRecordWithReimbursement","reimbursementByUser_ShowReimbursmentsByUserId","ReimbursementByUser","UserRecordWithReimbursement_UserRecordWithReimbursement","ReimbursementsByUserID","params","userReimbursementStatus","ReimbursementPage","PaginatorController","_this$props$reimbursm","_loop","x","PaginationLink","Pagination","aria-label","ReimbursementByPage","reimbursementByPage_ReimbursementPage","reimbursementByPage_PaginatorController","App","es","basename","components_header_Header","react_router","exact","path","component","interceptors","request","use","req","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.be2a7025.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as $ from 'jquery'\r\nimport Tether from 'tether'\r\nimport Popper from 'popper.js'\r\nimport 'bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\n\r\nwindow.Tether = Tether\r\nwindow.Popper = Popper\r\nwindow.jquery = window.$ = $\r\n","\r\n\r\nexport const REGISTER_USER = 'REGISTER_USER';\r\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\r\nexport const REGISTER_USER_ERROR = 'REGISTER_USER_ERROR';\r\n\r\n//LOGIN USERS ACTIONS\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const LOGIN_USER = 'LOGIN_USER';\r\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS';\r\nexport const LOGIN_USER_ERROR = 'LOGIN_USER_ERROR';\r\nexport const UPDATE_STATE_VALIDATION_ERROR = 'UPDATE_STATE_VALIDATION_ERROR';\r\n\r\nexport const SET_REIMBURSEMENT_USER = 'SET_REIMBURSEMENT_USER';\r\n\r\n//REIMBURSEMENTS ACTIONS\r\nexport const GET_REIMBURSEMENTS_BY_ID = 'GET_REIMBURSEMENTS_BY_ID';\r\nexport const GET_REIMBURSEMENTS_BY_ID_SUCCESS = 'GET_REIMBURSEMENTS_BY_ID_SUCCESS';\r\n\r\nexport const ADD_REIMBURSEMENT = 'ADD_REIMBURSEMENT';\r\nexport const ADD_REIMBURSEMENT_SUCCESS = 'ADD_REIMBURSEMENT_SUCCESS';\r\n\r\nexport const GET_REIMBURSEMENTS_BY_STATUS = 'GET_REIMBURSEMENTS_BY_STATUS'\r\nexport const GET_REIMBURSEMENTS_BY_STATUS_SUCCESS = 'GET_REIMBURSEMENTS_BY_STATUS_SUCCESS'\r\n\r\nexport const UPDATE_REIMBURSEMENT  = 'UPDATE_REIMBURSEMENT'\r\nexport const UPDATE_REIMBURSEMENT_SUCSESS = 'UPDATE_REIMBURSEMENT_STATUS'\r\n\r\nexport const GET_REIMBURSEMENTS_BY_PAGE = 'GET_REIMBURSEMENTS_BY_PAGE'\r\nexport const GET_REIMBURSEMENTS_BY_PAGE_SUCCESS = 'GET_REIMBURSEMENTS_BY_PAGE_SUCCESS'\r\n\r\n//USERS LIST ACTIONS\r\nexport const GET_LIST_USERS = 'GET_LIST_USERS'\r\nexport const GET_LIST_USERS_SUCCESS = 'GET_LIST_USERS_SUCCESS'\r\n\r\nexport const UPDATE_USER = 'UPDATE_USER'\r\nexport const UPDATE_USER_SUCCESS = 'UPDATE_USER_SUCCESS'\r\n\r\nexport const DELETE_USER = 'DELETE_USER'\r\nexport const DELETE_USER_SUCCESS = 'DELETE_USER_SUCCESS'\r\n\r\n//message actions\r\nexport const SET_MESSAGE = 'SET_MESSAGE'\r\nexport const CLEAR_MESSAGE = 'CLEAR_MESSAGE'\r\n\r\n","import * as types from './all.type.actions';\r\n\r\nexport const registerUserAction = (user:any) => {\r\n  return {\r\n    type: types.REGISTER_USER,\r\n    user:user\r\n  }\r\n};\r\nexport const loginUserAction = (user:any) => {\r\n  return {\r\n    type: types.LOGIN_USER,\r\n    user:user\r\n  }\r\n};\r\ninterface userToUpdate{\r\n  userName : string,\r\n  firstName: string,\r\n  lastName:string,\r\n  email: string,\r\n  role:number\r\n}\r\nexport const updateUserAction = (id:number,user: userToUpdate) => {\r\n  return {\r\n    type: types.UPDATE_USER,\r\n    id:id,\r\n    user:user\r\n  }\r\n};\r\nexport const deleteUserAction =(id:any) => {\r\n  return {\r\n    type: types.DELETE_USER,\r\n    id\r\n  }\r\n}\r\n\r\nexport const updateState = (loginState:any) => {\r\n  return {\r\n    type: types.UPDATE_STATE_VALIDATION_ERROR,\r\n    response: loginState\r\n  }\r\n};\r\n;\r\n\r\nexport const logout = () => {\r\n  let payload = 3\r\n  return {\r\n    type: types.LOGOUT,\r\n    payload\r\n  }\r\n};","import React, { Component, SyntheticEvent } from 'react'\r\nimport './Login.scss'\r\nimport logo from '../../statics/images/logo.webp'\r\nimport { connect } from 'react-redux';\r\nimport { loginUserAction, updateState } from '../../actions/user.actions';\r\nimport classnames from 'classnames'\r\nimport { ILoginState, IStoreState } from '../../reducers/state.models';\r\nimport { Alert } from 'reactstrap';\r\nimport { RouteComponentProps } from 'react-router';\r\n\r\ninterface MyProps extends RouteComponentProps {\r\n    dispatch: any,\r\n    history:any,\r\n    location: any,\r\n    loginState: ILoginState,\r\n    match: any,\r\n    staticContext:any,\r\n    loginUserAction: (user: object) => any,\r\n    updateState: (error: object) => any\r\n  }\r\ninterface MyState {\r\n  error:Object,\r\n  messageFromApi:string\r\n}\r\n\r\nclass Login extends Component<MyProps, MyState>{\r\n    //state to handle the form validation\r\n    state = {\r\n        error:{\r\n            username : '',\r\n            password : '',\r\n        },\r\n        messageFromApi: ''\r\n\r\n      };\r\n    usernameRef:any;\r\n    passwordRef:any;\r\n   \r\n    constructor(props:MyProps) {\r\n        super(props);\r\n        this.usernameRef = React.createRef();\r\n        this.passwordRef = React.createRef();\r\n    }\r\n    componentDidUpdate(){\r\n        if (localStorage.getItem(\"loginUser\")){\r\n            this.props.history.push('/reimbursements')\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        if (localStorage.getItem(\"loginUser\")){\r\n            this.props.history.push('/reimbursements')\r\n        }\r\n    }\r\n    onHandleLogin = (e:SyntheticEvent) => {\r\n        e.preventDefault();\r\n    \r\n        let username = this.usernameRef.value;\r\n        let password = this.passwordRef.value;\r\n        \r\n        if(username === ''){\r\n            this.setState({...this.state,error:{...this.state.error,\r\n                username:'username is required'\r\n            }})\r\n        }\r\n        else if(password === ''){\r\n            this.setState({...this.state,error:{...this.state.error,\r\n                password:'password is required'\r\n            }})\r\n        }else{\r\n            const data = {\r\n                    username, password\r\n            };\r\n           // this.props.updateState()\r\n           this.setState({...this.state,error:{...this.state.error,\r\n               username:'',\r\n               password:''\r\n            }})\r\n\r\n            this.props.loginUserAction(data)\r\n            \r\n            \r\n        }\r\n        \r\n\r\n        \r\n       \r\n    }\r\n    render(){\r\n        \r\n    return (\r\n        <div className= \"login container\" >\r\n            <Alert \r\n                className={classnames(\"mt-1 no-display \",{'display':this.props.loginState.response.message})}\r\n                color=\"danger\">\r\n                {this.props.loginState.response.message}\r\n            </Alert>\r\n             \r\n                <div className=\"logincontainer\">\r\n                    <div className=\"center\">\r\n                        <div className=\"imagecontainer\">\r\n                        <img className=\"img-fluid\" src={logo} alt=\"\"/>   \r\n                        </div>\r\n                        \r\n                        <form onSubmit={this.onHandleLogin} className='loginForm card p-4'>\r\n                            <div className=\"form-group\">\r\n                                <input \r\n                                    type=\"text\" \r\n                                    id=\"login\" \r\n                                    className={classnames(\"form-control \",{'is-invalid':this.state.error.username})} \r\n                                    name=\"login\" \r\n                                    placeholder=\"username\" \r\n                                    ref = {(input)=>{this.usernameRef=input}}\r\n                                    />\r\n                                    {this.state.error.username &&\r\n                                        <div className=\"invalid-feedback\">\r\n                                                {this.state.error.username}\r\n                                        </div>\r\n                                    }\r\n                                    \r\n                            </div>\r\n                            \r\n                            <div className=\"form-group\">\r\n                                <input \r\n                                    type=\"password\" \r\n                                    id=\"password\" \r\n                                    className={classnames(\"form-control \",{'is-invalid':this.state.error.password})}\r\n                                    name=\"password\" \r\n                                    placeholder=\"password\"\r\n                                    ref = {(input)=>{this.passwordRef=input}}\r\n                                    />\r\n                                    {this.state.error.password &&\r\n                                        <div className=\"invalid-feedback\">\r\n                                                {this.state.error.password}\r\n                                        </div>\r\n                                    }\r\n                            </div>\r\n                            \r\n                            <button  type=\"submit\" className=\"btn btn-block btn-primary\" >Log In</button>\r\n                        </form>\r\n                        \r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n     } n\r\n}\r\nexport const mapDispatchToProps = {\r\n    updateState,\r\n    loginUserAction\r\n  };\r\nconst mapStateToProps = (state:IStoreState) =>{\r\n    //console.log('this  is the state::' , state);\r\n    return {\r\n        loginState :state.loginState,\r\n        \r\n    };\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n    )(Login);","import * as types from './all.type.actions'\r\n\r\n\r\n\r\nexport const getAllUsers = () => {\r\n    return {\r\n      type: types.GET_LIST_USERS\r\n    }\r\n  };","import React, { Component } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { IUserListItem, IStoreState, ILoginState} from '../../reducers/state.models';\r\nimport { updateUserAction } from '../../actions/user.actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\ninterface myProps{\r\n    updateUserAction:(userId:any,user:any)=>{},\r\n    loginState:ILoginState,\r\n    user:IUserListItem\r\n}\r\ninterface myState{\r\n    modal:boolean\r\n}\r\n class UpdateUser extends Component<myProps,myState>{\r\n    state = {\r\n        modal:false\r\n    }\r\n    usernameRef:any;\r\n    firstnameRef:any;\r\n    lastnameRef:any;\r\n    emailRef:any;\r\n    roleRef:any;\r\n    constructor(props) {\r\n        super(props);\r\n        this.usernameRef = React.createRef();\r\n        this.firstnameRef= React.createRef();\r\n        this.lastnameRef = React.createRef();\r\n        this.emailRef = React.createRef();\r\n        this.roleRef = React.createRef();\r\n    }\r\n    toggle = () =>{\r\n        this.setState(prevState => ({\r\n          modal: !prevState.modal\r\n        }));\r\n      }\r\n    updateUser = (e)=>{\r\n        e.preventDefault();\r\n        let userToUpdate:any = {\r\n            userName : this.usernameRef.value,\r\n            firstName:  this.firstnameRef.value,\r\n            lastName: this.lastnameRef.value,\r\n            email: this.emailRef.value,\r\n            role:this.roleRef.value\r\n        }\r\n        this.props.updateUserAction(this.props.user.id,userToUpdate)\r\n        this.toggle();\r\n    }\r\n    render() {\r\n        const \r\n            {id,\r\n            userName,\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            role} = this.props.user;\r\n        return (\r\n            <>\r\n                <i onClick={this.toggle} className=\"text-warning fas fa-edit\"></i>\r\n                <Modal isOpen={this.state.modal} fade={false} toggle={this.toggle} >\r\n            <ModalHeader toggle={this.toggle}>Make changes and save</ModalHeader>\r\n            <ModalBody>\r\n                <form  onSubmit={this.updateUser} className=''>\r\n                   \r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\">Username:</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            id='username' \r\n                            className=\"form-control\"\r\n                            name='username'\r\n                            placeholder='username'\r\n                            required    \r\n                            min= '2'\r\n                            ref={input=>this.usernameRef= input}\r\n                            defaultValue = {userName}\r\n                            \r\n                    />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                    <label htmlFor=\"firstname\">First Name:</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            id='firstname' \r\n                            className=\"form-control\"\r\n                            name='firstname'\r\n                            placeholder='Please insert a firstname'\r\n                            required\r\n                            ref={input=>this.firstnameRef= input}\r\n                            defaultValue = {firstName}\r\n                           \r\n                    />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                    <label htmlFor=\"lastname\">Last Name</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            id='lastname' \r\n                            className=\"form-control\"\r\n                            name='lastname'\r\n                            placeholder='Please insert a lastname'\r\n                            required \r\n                            ref={input=>this.lastnameRef= input}\r\n                            defaultValue = {lastName}\r\n                           \r\n                    />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                    <label htmlFor=\"email\">Email:</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            id='email' \r\n                            className=\"form-control\"\r\n                            name='email'\r\n                            placeholder='Please insert a email'\r\n                            required\r\n                            ref={input=>this.emailRef= input} \r\n                            defaultValue = {email}\r\n                           \r\n                    />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                    <label htmlFor=\"email\">Role:</label>\r\n                        <select \r\n                            className='form-control'\r\n                            ref={input=>this.roleRef= input}\r\n                            defaultValue = {String(role.id)}  \r\n                                >\r\n                            <option value=\"1\">Admin</option>\r\n                            <option value=\"2\">Finance Manager</option>\r\n                            <option value=\"3\">Employee</option>\r\n                        </select>\r\n                    </div>\r\n                    <Button type='submit' color=\"primary\" >Update</Button>\r\n\r\n\r\n                </form>\r\n                \r\n            </ModalBody>\r\n          </Modal>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\nexport const mapDispatchProps = {\r\n    updateUserAction\r\n}\r\nconst mapStateToProps = (state:IStoreState)=>{\r\n    return{\r\n        loginState: state.loginState\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps,mapDispatchProps)(UpdateUser)\r\n","import React, { Component } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { IStoreState } from '../../reducers/state.models';\r\nimport { deleteUserAction } from '../../actions/user.actions';\r\n\r\n class DeleteUser extends Component <any,any>{\r\n    state = {\r\n        modal:false\r\n    }\r\n    toggle = () =>{\r\n        this.setState(prevState => ({\r\n          modal: !prevState.modal\r\n        }));\r\n      }\r\n    deleteUser=(e)=>{\r\n        e.preventDefault();\r\n        this.props.deleteUserAction(this.props.id)\r\n        this.toggle();\r\n\r\n\r\n      }\r\n    render() {\r\n        return (\r\n            <>\r\n                <i onClick={this.toggle} className=\"ml-auto text-danger fas fa-user-minus\"></i>\r\n                <Modal isOpen={this.state.modal} fade={false} toggle={this.toggle} className={this.props.className}>\r\n            <ModalHeader toggle={this.toggle}>Delete user</ModalHeader>\r\n            <ModalBody>\r\n                <form  onSubmit={this.deleteUser} className='card p-5'>\r\n\r\n                    <div className= 'd-flex justify-content-center'>\r\n                        <label className='my-3 lead' htmlFor=\"warning \">Are you sure you want to delete this user?</label>\r\n                    </div>\r\n                    \r\n                    <br/>\r\n                    <div className='w-100 d-flex justify-content-around'>\r\n                        <Button type='submit' color=\"danger\" >Delete</Button>\r\n                        <Button  onClick={this.toggle} color=\"primary\" >Cancel</Button>\r\n                    </div>\r\n                    \r\n\r\n\r\n                </form>\r\n                \r\n            </ModalBody>\r\n          </Modal>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\nexport const mapDispatchProps = {\r\n    deleteUserAction\r\n}\r\nconst mapStateToProps = (state:IStoreState)=>{\r\n    return{\r\n        loginState: state.loginState\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps,mapDispatchProps)(DeleteUser)\r\n","import React, { Component } from 'react'\r\nimport { IUserListItem } from '../../reducers/state.models';\r\nimport UpdateUser from './UpdateUser';\r\nimport DeleteUser from './DeleteUser';\r\n\r\ninterface myProps{\r\n    user:IUserListItem\r\n\r\n}\r\nexport default class UserRecord extends Component<any,myProps> {\r\n\r\n    render() {\r\n        const \r\n            {id,\r\n            userName,\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            role} = this.props.user;\r\n        return (\r\n            <>\r\n                <tr>\r\n                    <td>{userName}</td>\r\n                    <td>{firstName}</td>\r\n                    <td>{lastName}</td>\r\n                    <td>{email}</td>\r\n                    <td>{role.role}</td>\r\n                    <td className='d-flex'><UpdateUser user={this.props.user}/><DeleteUser className= \"ml-auto\" id = {id}/></td>\r\n                </tr>\r\n\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {Table,Spinner} from 'reactstrap';\r\nimport { IStoreState, ILoginState, IMessageState, IUserListItem } from '../../reducers/state.models';\r\nimport { getAllUsers } from '../../actions/userList.actions';\r\nimport { clearMessage } from '../../actions/message.action';\r\nimport UserRecord from './UserRecord';\r\n\r\ninterface MyProps {\r\n    value?:string\r\n    history?:any,\r\n    dispatch:any,\r\n    usersListState:IUserListItem[],\r\n    loginState:ILoginState,\r\n    getAllUsers:()=>(any),\r\n    clearMessage:()=>(void)\r\n}\r\n\r\nclass UsersList extends Component<MyProps,any> {\r\n    \r\n    componentDidMount(){\r\n        console.log('component did mount::', this.props)\r\n        if(this.props.loginState.isAuthenticated){\r\n            console.log('component did mount::', this.props)\r\n            this.props.getAllUsers();\r\n        }else{\r\n            console.log(`i'm not authenticated`)\r\n            localStorage.removeItem('loginUser')\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('component update');\r\n        \r\n        if(this.props.loginState.isAuthenticated){\r\n            console.log('component did mount::', this.props)\r\n        }else{\r\n            console.log(`i'm not authenticated`)\r\n            localStorage.removeItem('loginUser')\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n\r\nrender() {\r\n        let list:any;\r\n        if (this.props.usersListState[0]){\r\n            list = [...this.props.usersListState].map((u)=>\r\n                (<UserRecord key ={u.id} user={u} />\r\n                )\r\n            )\r\n        }\r\n\r\n        return (\r\n            //todo: \r\n            <div className=\"mt-5\" >\r\n               <Table striped>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Username</th>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Email</th>\r\n                        <th>Role</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {(this.props.usersListState[0] && list ) || (<tr><td colSpan={5} className=\"text-center\" ><Spinner color=\"success\" /></td></tr>) \r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = {\r\n    getAllUsers,\r\n};\r\nconst mapStateToProps = (state:IStoreState) =>{\r\n    return { \r\n        usersListState:state.usersListState,\r\n        loginState:    state.loginState\r\n    };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(UsersList);\r\n","import React, { Component } from 'react' ;\r\nimport './Header.scss'\r\nimport logo from '../../statics/images/logo.webp'\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../actions/user.actions';\r\nimport {Nav,\r\n        NavItem,\r\n        Dropdown,\r\n        DropdownItem,\r\n        DropdownMenu,\r\n        DropdownToggle,\r\n        Navbar,\r\n        NavbarBrand,\r\n        NavbarToggler,\r\n        Collapse,\r\n        NavLink\r\n    } from 'reactstrap'\r\nimport { IStoreState } from '../../reducers/state.models';\r\n\r\n\r\n\r\ninterface MyProps {\r\n    value?:string\r\n    history?:any,\r\n    dispatch:any,\r\n    loginState\r\n}\r\nclass Header extends Component<MyProps,any>{\r\n    state = {\r\n        dropdownOpen: false,\r\n        dropdownSettings: false,\r\n        collapsed:true\r\n    }\r\n    componentDidMount(){\r\n        console.log(this.props)\r\n    }\r\n    logout = ()=>{\r\n        this.props.dispatch(logout());\r\n        localStorage.removeItem(\"loginUser\")\r\n        this.props.history.push('/');\r\n    }\r\n    toggle = () => {\r\n            this.setState({\r\n              dropdownOpen: !this.state.dropdownOpen\r\n            });\r\n          }\r\n    toggleSetting = () => {\r\n            this.setState({\r\n                dropdownSettings: !this.state.dropdownSettings\r\n            });\r\n          }   \r\n    toggleNavbar = ()=>{\r\n        this.setState({\r\n            collapsed: !this.state.collapsed\r\n          });\r\n        \r\n    } \r\n    render(){\r\n        if(!this.props.loginState.isAuthenticated)\r\n        {\r\n            return (\r\n                <Nav  >\r\n                </Nav >\r\n            )\r\n        }\r\n        return ( \r\n            <div className = \"header\" >\r\n        <Navbar color=\"faded\" light expand=\"sm\">\r\n          <NavbarBrand to ='/' className=\"mr-auto\"><img className=\"img-fluid\" src={logo} height='50px' width='50px' alt=\"\"/>  </NavbarBrand>\r\n          <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n          <Collapse isOpen={!this.state.collapsed} navbar>\r\n          <Nav navbar >\r\n               <NavItem className=\"nav-item\">\r\n                    <Link to ='' className=\"nav-link active\">Home</Link>\r\n                    {//new reimbursment and below list of reimbursements by id\r\n                    }\r\n                </NavItem>\r\n                {this.props.loginState.rol===1 || this.props.loginState.rol===2 ? \r\n                <Dropdown nav isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n                    <DropdownToggle nav caret>\r\n                    Reimbursements\r\n                    </DropdownToggle>\r\n                    <DropdownMenu>\r\n                    <DropdownItem disabled>By Status</DropdownItem>\r\n                    <DropdownItem><Link to ='/reimbursements/pending' className=\"nav-link \">Pending</Link></DropdownItem>\r\n                    \r\n                    <DropdownItem divider />\r\n                    <DropdownItem><Link to = \"/reimbursements/users\"  className=\"nav-link \">By User</Link></DropdownItem>\r\n                    <DropdownItem divider />\r\n                    <DropdownItem><Link to = \"/all/reimbursements\"  className=\"nav-link \">All</Link></DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n                    \r\n                    :<></>}\r\n                {this.props.loginState.rol===1 ? <>\r\n                    \r\n                    <NavItem className=\"nav-item\">\r\n                    <Link to ={`/users/`+this.props.loginState.userId} className=\"nav-link\">Users</Link>\r\n                    {//new reimbursment and below list of reimbursements by id\r\n                    }\r\n                </NavItem></>\r\n                    \r\n                    :<></>}\r\n                <NavItem className=\"nav-item\">\r\n                    <Link to ='/myinfo' className=\"nav-link\">My Info</Link>\r\n                    {//new reimbursment and below list of reimbursements by id\r\n                    }\r\n                </NavItem>\r\n                <Dropdown nav isOpen={this.state.dropdownSettings} toggle={this.toggleSetting} inNavbar>\r\n                    <DropdownToggle nav caret>\r\n                    <i className=\"fas fa-cog\"></i>\r\n                    </DropdownToggle>\r\n                    <DropdownMenu right>\r\n                    <DropdownItem><Link to ='/' className=\"nav-link\" onClick={this.logout} >Log out</Link> </DropdownItem>\r\n                    \r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n                \r\n            \r\n        </Nav>\r\n              </Collapse></Navbar>\r\n            </div>\r\n            \r\n        )\r\n                    }\r\n    \r\n}\r\nconst mapStateToProps = (state:IStoreState) =>{\r\n    return {\r\n        loginState:state.loginState\r\n    };\r\n}\r\nexport default connect(mapStateToProps)(Header);\r\n","import * as types from './all.type.actions';\r\nimport { IReimbursement, IReimbursmentUserState } from '../reducers/state.models';\r\n\r\n\r\nexport const getReimbursementsByUser = (id:number) => {\r\n  return {\r\n    type: types.GET_REIMBURSEMENTS_BY_ID,\r\n    id\r\n  }\r\n};\r\nexport const addReimbursement = (payload) => {\r\n  return {\r\n    type: types.ADD_REIMBURSEMENT,\r\n    payload\r\n  }\r\n};\r\nexport const getReimbursementsByStatus = (statusId:number)=>{\r\n  return {\r\n    type: types.GET_REIMBURSEMENTS_BY_STATUS,\r\n    statusId\r\n  }\r\n};\r\nexport const updatePendingReimbursementStatus= (reimbursement:IReimbursement)=>{\r\n  return {\r\n    type: types.UPDATE_REIMBURSEMENT,\r\n    reimbursement,\r\n  }\r\n}\r\nexport const setReimbursementUser= (user:IReimbursmentUserState)=>{\r\n  return {\r\n    type: types.SET_REIMBURSEMENT_USER,\r\n    user,\r\n  }\r\n}\r\nexport const getReimbursementsByPage= (page:number)=>{\r\n  return {\r\n    type: types.GET_REIMBURSEMENTS_BY_PAGE,\r\n    page\r\n  }\r\n}","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React,{Component} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { IStoreState } from '../../reducers/state.models';\r\nimport { addReimbursement } from '../../actions/reimbursements.actions';\r\nimport { createReimbursement } from '../../services/models/reimbursements.model';\r\n\r\nclass AddReimbursement extends Component <any,any>{\r\n\r\n    state = {\r\n        modal:false\r\n    }\r\n    amountRef:any;\r\n    descriptionRef:any;\r\n    typeRef:any;\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.amountRef = React.createRef();\r\n      this.descriptionRef = React.createRef();\r\n      this.typeRef = React.createRef();\r\n\r\n\r\n    }\r\n  \r\n    toggle = () =>{\r\n      this.setState(prevState => ({\r\n        modal: !prevState.modal\r\n      }));\r\n    }\r\n    clear = ()=>{\r\n      this.amountRef.value='';\r\n      this.descriptionRef.value=''\r\n    }\r\n    submitReimbursement=(e:any)=>{\r\n        e.preventDefault();\r\n        console.log('submit',this.amountRef.value,this.descriptionRef.value,this.typeRef.value);\r\n        let payload:createReimbursement = {\r\n            amount:this.amountRef.value,\r\n            description:this.descriptionRef.value,\r\n            type_id: this.typeRef.value\r\n        }\r\n        this.props.addReimbursement(payload)\r\n        this.clear();\r\n        this.toggle()\r\n        //todo: addreimbursement reducer after call get all reimbursements to update list from reimbursements\r\n        \r\n\r\n    }\r\n    render() {\r\n      return (\r\n        <div>\r\n            \r\n          <Button color=\"danger\" onClick={this.toggle}>{this.props.buttonLabel}</Button>\r\n          <Modal isOpen={this.state.modal} fade={false} toggle={this.toggle} className={this.props.className}>\r\n            <ModalHeader toggle={this.toggle}>Create a Reimbursement</ModalHeader>\r\n            <ModalBody>\r\n                <form  onSubmit={this.submitReimbursement} className=''>\r\n                    <div className=\"form-group\">\r\n                        <input \r\n                            type=\"number\" \r\n                            id='amount' \r\n                            className=\"form-control\"\r\n                            name='amount'\r\n                            placeholder='Insert the amount'\r\n                            required    \r\n                            min= '0'\r\n                            ref = {input=>this.amountRef = input}\r\n                    />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input \r\n                            type=\"text\" \r\n                            id='Description' \r\n                            className=\"form-control\"\r\n                            name='description'\r\n                            placeholder='Please insert a description'\r\n                            required \r\n                            ref={input=>this.descriptionRef= input}\r\n                    />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <select \r\n                            className='form-control'\r\n                            ref={input=>this.typeRef= input}\r\n                                >\r\n                            <option value=\"1\">Lodging</option>\r\n                            <option value=\"2\">Travel</option>\r\n                            <option value=\"3\">Food</option>\r\n                            <option defaultChecked value=\"4\">Otros</option>\r\n                        </select>\r\n                    </div>\r\n                    <Button type='submit' color=\"primary\" >Submit</Button>\r\n\r\n\r\n                </form>\r\n                \r\n            </ModalBody>\r\n          </Modal>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\nexport const mapDispatchProps = {\r\n    addReimbursement\r\n\r\n}\r\nconst mapStateToProps = (state:IStoreState) =>{\r\n    return {\r\n        reimbursementsListState: state.reimbursementsListState\r\n\r\n    };\r\n}\r\n  \r\nexport default connect(mapStateToProps,mapDispatchProps)(AddReimbursement);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IStoreState, ILoginState, IReimbursement, IMessageState } from '../../reducers/state.models';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { getReimbursementsByUser } from '../../actions/reimbursements.actions';\r\nimport {Table,Spinner} from 'reactstrap';\r\nimport AddReimbursement from './AddReimbursement';\r\n\r\ninterface MyProps extends RouteComponentProps{\r\n    loginState:ILoginState,\r\n    reimbursementsListState:IReimbursement[]\r\n    getReimbursementsByUser:(id:number)=>void\r\n    \r\n}\r\n\r\nclass ReimbursementsList extends Component<MyProps, any> {\r\n    componentDidMount(){\r\n        if(this.props.loginState.isAuthenticated){\r\n            let userId:number = this.props.loginState.userId;\r\n            console.log('component did mount::', this.props)\r\n            this.props.getReimbursementsByUser(userId)\r\n        }else{\r\n            console.log(`i'm not authenticated`)\r\n            localStorage.removeItem('loginUser')\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('esto es updated::',this.props)\r\n    }\r\nrender() {\r\n            let list:any;\r\n            if (this.props.reimbursementsListState[0]){\r\n                console.log('ready to print',[...this.props.reimbursementsListState]) \r\n                list = [...this.props.reimbursementsListState].map((r)=>\r\n                    (<tr key = {r.reimbursement_id}>\r\n                        <td>{r.submitted_date && r.submitted_date.substr(0,10)}</td>\r\n                        <td>{r.description}</td>\r\n                        <td>{r.type}</td>\r\n                        <td>{r.amount}</td>\r\n                        <td>{r.status}</td>\r\n                        <td>{r.resolver_name}</td>\r\n                        <td>{r.resolve_date && r.resolve_date.substr(0,10)}</td>\r\n                    </tr>)\r\n                )\r\n            }\r\n            return (\r\n                \r\n            <div className='mt-5'>\r\n                <h4 className='display-4'>My Reimbursements</h4>\r\n\r\n                <div className='w-100 d-flex flex-row-reverse my-4'>\r\n                    <AddReimbursement buttonLabel= 'Add Reimbursement' />\r\n                </div>\r\n               <Table striped>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Submitted Date</th>\r\n                        <th>Description</th>\r\n                        <th>Type</th>\r\n                        <th>Amount</th>\r\n                        <th>Status</th>\r\n                        <th>Resover Name</th>\r\n                        <th>Resolve Date</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {(this.props.reimbursementsListState[0] && list ) || (<tr><td colSpan={7} className=\"text-center\" ><Spinner color=\"success\" /></td></tr>) \r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport const mapDispatchProps = {\r\n    getReimbursementsByUser\r\n\r\n}\r\nconst mapStateToProps = (state:IStoreState) =>{\r\n    return {\r\n        loginState:state.loginState,\r\n        reimbursementsPendingListState:state.reimbursementsPendingListState,\r\n        reimbursementsListState: state.reimbursementsListState,\r\n        messages:state.messageState\r\n\r\n    };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchProps)(ReimbursementsList);","import * as types from '../actions/all.type.actions';\r\nimport { ILoginState } from './state.models';\r\n\r\n//the reducer recieves the previous state and\r\n//and action object with action.type and action.repsonse \r\n//which is the success response from the API \r\nconst initialState:ILoginState = {\r\n  rol:0,\r\n  userId: 0,\r\n  token : '',\r\n  isAuthenticated: false,\r\n  user : {},\r\n  response:{\r\n    message:''\r\n  }\r\n}\r\n\r\nexport default function(state:ILoginState = initialState, action:any) {\r\n  const response = action.response;\r\n  switch(action.type) {\r\n   \r\n    case types.LOGIN_USER_SUCCESS:\r\n        const newState:ILoginState = {\r\n            rol:response.user.role.id,\r\n            userId: response.user.id,\r\n            token : response.token,\r\n            isAuthenticated: true,\r\n            user: response.user\r\n        }\r\n      return {...state,...newState};\r\n    case types.LOGOUT:\r\n      \r\n        localStorage.removeItem(\"loginUser\")\r\n        const newState2:ILoginState = {\r\n            rol:0,\r\n            userId: 0,\r\n            token : '',\r\n            isAuthenticated: false,\r\n            user : {},\r\n            response:{\r\n              message:''\r\n            }\r\n        }\r\n      return {...state,...newState2};\r\n    case types.LOGIN_USER_ERROR:\r\n      return { ...state, response };\r\n      \r\n    case types.UPDATE_STATE_VALIDATION_ERROR:\r\n      return { ...state, response };\r\n    default:\r\n      return state;\r\n  }\r\n};","import * as types from '../actions/all.type.actions';\r\nimport { IReimbursement } from './state.models';\r\n\r\nconst initialState:IReimbursement[] = []\r\n\r\nexport default function(state = initialState, action:any) {\r\n  const response= action.response ;\r\n  \r\n  \r\n  switch(action.type) {\r\n    case types.GET_REIMBURSEMENTS_BY_ID_SUCCESS:\r\n      let reimList:IReimbursement[];\r\n      if(response.status==204) {\r\n        //store.dispatch(setMessage(\"hola\"))\r\n        reimList = []\r\n        return [ reimList ];\r\n      }else{\r\n        reimList = response.data\r\n        \r\n        return [...reimList ];\r\n      }\r\n    case types.ADD_REIMBURSEMENT_SUCCESS:\r\n      if (response.status==201){\r\n        return [...state,response.data]\r\n      }else{\r\n        return [...state]\r\n      } \r\n    default:\r\n          return [...state] ;\r\n  }\r\n};       ","import * as types from '../actions/all.type.actions';\r\nimport { IUserListItem } from './state.models';\r\n\r\n\r\nconst initialState:IUserListItem[]  = []\r\n\r\n\r\nexport default function(state:IUserListItem[] = initialState, action:any) {\r\n  let response:IUserListItem[] \r\n\r\n  switch(action.type) {\r\n    case types.GET_LIST_USERS_SUCCESS:\r\n        response = action.response;\r\n      return [...response ];\r\n\r\n    case types.UPDATE_USER_SUCCESS:\r\n      let updateUser = action.response.data\r\n      return state.map((user)=>{\r\n        if(user.id==updateUser.id){\r\n          return updateUser\r\n        }\r\n        return user\r\n        \r\n      })\r\n    case types.DELETE_USER_SUCCESS:\r\n      console.log('in the reducer::',action.response)\r\n      let deleteId = action.response.data.id \r\n      return state.filter(user=>user.id!=deleteId);\r\n    default:\r\n      return [...state];\r\n  }\r\n}","import * as types from '../actions/all.type.actions';\r\nimport { IMessageState } from './state.models';\r\n\r\nlet initialState:IMessageState = {\r\n    message:' '\r\n  }\r\n\r\n\r\nexport default function(state:IMessageState = initialState, action:any) {\r\n  let response:IMessageState= action.response;\r\n  console.log('reducer in message:',response)\r\n  switch(action.type) {\r\n    case types.SET_MESSAGE:\r\n      return { ...state , ...response };\r\n\r\n    case types.CLEAR_MESSAGE:\r\n      return { ...state,message:'' };\r\n      \r\n    default:\r\n      return state;\r\n  }\r\n}","import * as types from '../actions/all.type.actions';\r\nimport { IReimbursement } from './state.models';\r\n\r\nconst initialState:IReimbursement[] = []\r\n\r\nexport default function(state = initialState, action:any) {\r\n  const response= action.response ;\r\n  \r\n  \r\n  switch(action.type) {\r\n    case types.GET_REIMBURSEMENTS_BY_STATUS_SUCCESS:\r\n        let reimList:IReimbursement[];\r\n      if(response.status==204) {\r\n        //store.dispatch(setMessage(\"hola\"))\r\n        reimList = []\r\n        return [ reimList ];\r\n      }else{\r\n        reimList = response.data\r\n        \r\n        return [...reimList ];\r\n      }\r\n    case types.UPDATE_REIMBURSEMENT_SUCSESS:\r\n        let updateItem:IReimbursement;\r\n        if(response.status==200) {\r\n          updateItem = response.data\r\n          let newList = state.filter((u)=>u.reimbursement_id!=updateItem.reimbursement_id)\r\n          return [ ...newList ];\r\n        }else{\r\n          \r\n          return [...state ];\r\n        }\r\n    default:\r\n          return [...state] ;\r\n  }\r\n};  ","\r\n\r\n\r\nimport * as types from '../actions/all.type.actions';\r\nimport { IMessageState, IReimbursmentUserState } from './state.models';\r\n\r\nlet initialState:IReimbursmentUserState ={\r\n    id: undefined, // primary key\r\n    userName: undefined,// not null, unique\r\n    firstName: undefined, // not null\r\n    lastName:undefined,\r\n    email: undefined, // not null\r\n    role: undefined\r\n  }\r\n\r\n\r\nexport default function(state:IReimbursmentUserState = initialState, action:any) {\r\n  let response:IMessageState= action.user;\r\n  switch(action.type) {\r\n    case types.SET_REIMBURSEMENT_USER:\r\n      return { ...state , ...response };\r\n      \r\n    default:\r\n      return {...state};\r\n  }\r\n}","import * as types from '../actions/all.type.actions';\r\nimport { IPagesReimbursements, IReimbursement } from './state.models';\r\n\r\nconst initialState:IPagesReimbursements ={\r\n    reimbursementList:[],\r\n    currentPage:0,\r\n    pageCount:0,\r\n    pagesUrl:[],\r\n  \r\n  }\r\n\r\nexport default function(state = initialState, action:any) {\r\n  const response= action.response ;\r\n  \r\n  \r\n  switch(action.type) {\r\n    case types.GET_REIMBURSEMENTS_BY_PAGE_SUCCESS:\r\n      if(response.status==200) {\r\n        //store.dispatch(setMessage(\"hola\"))\r\n        const newPageState:IPagesReimbursements ={\r\n          reimbursementList:response.data.result,\r\n          pageCount:response.data.pageCount,\r\n          pagesUrl:response.data.pages,\r\n          currentPage:response.data.current\r\n        }\r\n        return {...newPageState };\r\n      }\r\n    default:\r\n            return {...state };\r\n  }\r\n};  ","import { combineReducers } from 'redux';\r\nimport loginReducer from './loginReducer'\r\nimport reimbursementsReducer from './reimbursementsReducer';\r\nimport usersReducer from './usersListReducer'\r\nimport messageReducer from './messageReducer'\r\nimport reimbursementPendingReducer from './reimbursementPendingReducer';\r\nimport userReimbursementReducer from './userReimbursementReducer';\r\nimport reimbursementByPageReducer from './reimbursementByPageReducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  loginState :loginReducer,\r\n  reimbursementsListState :reimbursementsReducer,\r\n  reimbursementsPendingListState : reimbursementPendingReducer,\r\n  usersListState : usersReducer,\r\n  messageState: messageReducer,\r\n  userReimbursementState:userReimbursementReducer,\r\n  reimbursmentByPageState:reimbursementByPageReducer\r\n});\r\n\r\nexport default rootReducer;","export const url:string = 'http://52.14.165.212:9050/api';\r\n//export const url:string = 'http://127.0.0.1:9050/api';","import axios from 'axios';\r\nimport { url } from './apiUrl';\r\nimport {LoginUser} from './models/loginModel';\r\n\r\nexport class BaseService {\r\n  //     http://52.14.165.212:9050/api\r\n  url: string = url;\r\n  constructor(route: string) {\r\n    this.url += route;\r\n  }\r\n\r\n  getHeaders()  {\r\n    let login: LoginUser = this.getCurrentLogin();\r\n    const headers: any = {'Content-Type': 'application/json'};\r\n    if (login) headers.Authorization = 'Beared '+login.token;\r\n    return headers;\r\n  }\r\n\r\n  getCurrentLogin(): LoginUser {\r\n    let login: LoginUser;\r\n    const data = localStorage.getItem(\"loginUser\");\r\n    if(data)  login = JSON.parse(data)\r\n    //@ts-ignore\r\n    return login;\r\n  }\r\n  \r\n  Get(id:number){\r\n     return axios.get(`${this.url}/${id}`, {headers: this.getHeaders()})\r\n                  .then(resp => {\r\n                    return resp.data;\r\n                  }).catch(error => {\r\n                    return error.response.data\r\n                  });\r\n   }\r\n  GetAll(){\r\n    return axios.get(`${this.url}`, {headers: this.getHeaders()})\r\n                 .then(resp => {\r\n                   return resp.data;\r\n                 }).catch(error => {\r\n                   return error.response.data\r\n                 });\r\n  }\r\n\r\n  Add = (item) =>{\r\n    return axios.post(`${this.url}`,item, {headers: this.getHeaders()})\r\n                .then(resp => {\r\n                    return resp ;\r\n                }).catch(error => {\r\n                    return error.response\r\n                });\r\n  }\r\n  Update = (id:number,user)=>{\r\n    console.log('inside the service update url::',`${this.url}/${id}`,user)\r\n    return axios.patch(`${this.url}/${id}`,user, {headers: this.getHeaders()})\r\n                .then(resp => {\r\n                  return resp;\r\n                }).catch(error => {\r\n                  return error.response\r\n                });\r\n  }\r\n  Delete= (id:number)=>{\r\n    console.log('inside delete:::',`${this.url}/${id}`);\r\n    \r\n    return axios.delete(`${this.url}/${id}`, {headers: this.getHeaders()})\r\n                .then(resp => {\r\n                  return resp;\r\n                }).catch(error => {\r\n                  return error.response\r\n                });\r\n  }\r\n}","\r\nimport axios from 'axios'\r\n\r\nimport {LoginUser} from './models/loginModel';\r\nimport { BaseService } from './baseService';\r\n\r\n export class AuthenticationService extends BaseService{\r\n\r\n  constructor() {\r\n    super(\"\");\r\n  }\r\n\r\n  setCurrentLogin(login: LoginUser) {\r\n    localStorage.setItem(\"loginUser\", JSON.stringify(login));\r\n  }\r\n\r\n  authenticated(): boolean {\r\n    let login: LoginUser = this.getCurrentLogin();\r\n    return !!login && !!login.token;\r\n  }\r\n\r\nAuthenticate = (user: string, pwd: string) => {\r\n    localStorage.removeItem('loginUser');\r\n    return axios.post(this.url + '/login', { \"username\": user, \"password\": pwd })\r\n    .then(resp => {\r\n      this.setCurrentLogin(resp.data)\r\n      return resp.data;\r\n    }).catch(error => {\r\n      throw error\r\n    });\r\n  }\r\n}\r\n","import { put, call } from 'redux-saga/effects';\r\n\r\nimport * as types from '../actions/all.type.actions';\r\nimport { UserService } from '../services/user.service';\r\nimport { AuthenticationService } from '../services/authenticationService';\r\n\r\nexport function* loginSaga(payload:any) {\r\n\r\n  let authenticationService = new AuthenticationService();\r\n  try {\r\n    const response = yield call(authenticationService.Authenticate, payload.user.username,payload.user.password);\r\n    yield [\r\n      put({ type: types.LOGIN_USER_SUCCESS, response })\r\n    ];\r\n  } catch(error) {\r\n    const response = error.response.data\r\n    yield put({ type: types.LOGIN_USER_ERROR , response })\r\n  }\r\n} ","import axios from 'axios'\r\n\r\n\r\nimport { BaseService } from './baseService';\r\nimport { IReimbursement } from '../reducers/state.models';\r\n\r\n export class ReimbursementService extends BaseService{\r\n\r\n    constructor() {\r\n        super(\"/reimbursement\");\r\n    }\r\n\r\n    // get by author\r\n    getReimbursements = (id:number) => {\r\n        console.log(`my urls::: ${this.url}/author/userId/${id}`)\r\n        return axios.get(`${this.url}/author/userId/${id}`, {headers: this.getHeaders()})\r\n                    .then(resp => {\r\n                        console.log('this is the response: ',resp)\r\n                        return resp ;\r\n                    }).catch(error => {\r\n                        return error.response\r\n                    });\r\n    }\r\n    //get by status\r\n    getReimbursementsByStatus = (statusId:number) => {\r\n        console.log(`my urls::: ${this.url}/status/${statusId}`)\r\n        return axios.get(`${this.url}/status/${statusId}`, {headers: this.getHeaders()})\r\n                    .then(resp => {\r\n                        console.log('this is the response: ',resp)\r\n                        return resp ;\r\n                    }).catch(error => {\r\n                        return error.response\r\n                    });\r\n    }\r\n    //update reimbursement by status\r\n    updateReimbursmentStatus =(reimbursement:IReimbursement)=>{\r\n        console.log(`my urls::: ${this.url}`)\r\n        return axios.patch(`${this.url}`,reimbursement, {headers: this.getHeaders()})\r\n                    .then(resp => {\r\n                        console.log('this is the response form update: ',resp)\r\n                        return resp ;\r\n                    }).catch(error => {\r\n                        return error.response\r\n                    });\r\n    }\r\n    getReimbursmentByPage = (page:number)=>{\r\n        let _page = page || 1;\r\n        console.log(`my urls::: ${this.url}`)\r\n        return axios.get(`${this.url}/page?page=${_page}&limit=8`, {headers: this.getHeaders()})\r\n                    .then(resp => {\r\n                        console.log('this is the response form update: ',resp)\r\n                        return resp ;\r\n                    }).catch(error => {\r\n                        return error.response\r\n                    });\r\n    }\r\n\r\n}\r\n","import { put, call } from 'redux-saga/effects';\r\n\r\nimport * as types from '../actions/all.type.actions';\r\nimport { ReimbursementService } from '../services/reimbursements.service';\r\n\r\nexport function* getReimbursementsByUserSaga(payload:any){\r\n  let reimbursementService = new ReimbursementService();\r\n  try {\r\n    const response = yield call(reimbursementService.getReimbursementsByStatus, payload.statusId);\r\n    console.log('reducerReimbursement by status response:',response)\r\n    yield [\r\n      put({ type: types.GET_REIMBURSEMENTS_BY_STATUS_SUCCESS, response })\r\n    ];\r\n  } catch(error) {\r\n    yield put({ type: types.SET_MESSAGE, error });\r\n  }\r\n}\r\nexport function* reimbursementByIdSaga(payload:any) {\r\n  \r\n    let reimbursementService = new ReimbursementService();\r\n    try {\r\n      const response = yield call(reimbursementService.getReimbursements, payload.id);\r\n      console.log('reducerReimbursement response:',response)\r\n      yield [\r\n        put({ type: types.GET_REIMBURSEMENTS_BY_ID_SUCCESS, response })\r\n      ];\r\n    } catch(error) {\r\n      yield put({ type: types.SET_MESSAGE, error });\r\n    }\r\n}\r\nexport function* addReimbursementSaga(payload:any){\r\n  let reimbursementService = new ReimbursementService();\r\n    try {\r\n      console.log('PAYLOADDDDDD::::',payload.payload)\r\n      const response = yield call(reimbursementService.Add, payload.payload);\r\n      console.log('addReimbursement response:',response)\r\n      yield [\r\n        put({ type: types.ADD_REIMBURSEMENT_SUCCESS, response })\r\n      ];\r\n    } catch(error) {\r\n      yield put({ type: types.SET_MESSAGE, error });\r\n    }\r\n}\r\nexport function* updateReimbursementStatusSaga(payload:any){\r\n  let reimbursementService = new ReimbursementService();\r\n    try {\r\n      console.log('PAYLOADDDDDD::::',payload.reimbursement)\r\n      const response = yield call(reimbursementService.updateReimbursmentStatus, payload.reimbursement);\r\n      console.log('addReimbursement response:',response)\r\n      yield [\r\n        put({ type: types.UPDATE_REIMBURSEMENT_SUCSESS, response })\r\n      ];\r\n    } catch(error) {\r\n      yield put({ type: types.SET_MESSAGE, error });\r\n    }\r\n}\r\nexport function* reimbursementByPageSaga(payload:any){\r\n  let reimbursementService = new ReimbursementService();\r\n    try {\r\n      console.log('PAYLOADDDDDD::::',)\r\n      const response = yield call(reimbursementService.getReimbursmentByPage,payload.page);\r\n      console.log('get by page response:',response)\r\n      yield [\r\n        put({ type: types.GET_REIMBURSEMENTS_BY_PAGE_SUCCESS, response })\r\n      ];\r\n    } catch(error) {\r\n      yield put({ type: types.SET_MESSAGE, error });\r\n    }\r\n}","\r\nimport axios from 'axios'\r\n\r\nimport {LoginUser} from './models/loginModel';\r\nimport { BaseService } from './baseService';\r\n\r\n export class UserService extends BaseService{\r\n\r\n  constructor() {\r\n    super(\"/users\");\r\n  }\r\nGetAllUsers =()=> {\r\n    return axios.get(`${this.url}`, {headers: this.getHeaders()})\r\n                 .then(resp => {\r\n                   return resp.data;\r\n                 }).catch(error => {\r\n                   return error.response.data\r\n                 });\r\n  }\r\n}\r\n","import { put, call } from 'redux-saga/effects';\r\n\r\nimport * as types from '../actions/all.type.actions';\r\nimport { UserService } from '../services/user.service';\r\n\r\nexport function* getUserListSaga() {\r\n  let userService = new UserService();\r\n  try {\r\n    const response = yield call(userService.GetAllUsers);\r\n    console.log(response)\r\n    yield put({ type: types.GET_LIST_USERS_SUCCESS, response }) ;\r\n\r\n  } catch(error) {\r\n    yield put({ type: types.SET_MESSAGE, error });\r\n  }\r\n}\r\nexport function* updateUserSaga(payload:any){\r\n  let userService = new UserService();\r\n  console.log('this is the payload for the update:',payload.id,payload.user);\r\n  \r\n  try {\r\n    const response = yield call(userService.Update,payload.id,payload.user);\r\n    console.log(response)\r\n    yield put({ type: types.UPDATE_USER_SUCCESS, response }) ;\r\n\r\n  } catch(error) {\r\n    console.log(error)\r\n    yield put({ type: types.SET_MESSAGE, error });\r\n  }\r\n\r\n}\r\nexport function* deleteUserSaga(payload:any){\r\n  let userService = new UserService();\r\n  console.log('this is the payload for the delete:',payload.id);\r\n  \r\n  try {\r\n    const response = yield call(userService.Delete,payload.id);\r\n    console.log(response)\r\n    yield put({ type: types.DELETE_USER_SUCCESS, response }) ;\r\n\r\n  } catch(error) {\r\n    console.log(error)\r\n    yield put({ type: types.SET_MESSAGE, error });\r\n  }\r\n\r\n}\r\n","import { takeLatest } from 'redux-saga/effects';\r\nimport { loginSaga  } from './authenticationSaga';\r\n\r\nimport * as types from '../actions/all.type.actions';\r\nimport { reimbursementByIdSaga,\r\n         addReimbursementSaga,\r\n         getReimbursementsByUserSaga,\r\n         updateReimbursementStatusSaga,\r\n         reimbursementByPageSaga} from './reimbursements.saga';\r\nimport {getUserListSaga,updateUserSaga,deleteUserSaga} from './users.saga'\r\n\r\n\r\nexport default function* watchActions() {\r\n  //login user\r\n  yield takeLatest(types.LOGIN_USER, loginSaga);\r\n  //reimbursements\r\n  yield takeLatest(types.GET_REIMBURSEMENTS_BY_ID,reimbursementByIdSaga);\r\n  yield takeLatest(types.ADD_REIMBURSEMENT,addReimbursementSaga);\r\n  yield takeLatest(types.GET_REIMBURSEMENTS_BY_STATUS,getReimbursementsByUserSaga);\r\n  yield takeLatest(types.UPDATE_REIMBURSEMENT,updateReimbursementStatusSaga)\r\n  yield takeLatest(types.GET_REIMBURSEMENTS_BY_PAGE,reimbursementByPageSaga)\r\n  //users\r\n  yield takeLatest(types.GET_LIST_USERS,getUserListSaga);\r\n  yield takeLatest(types.UPDATE_USER,updateUserSaga);\r\n  yield takeLatest(types.DELETE_USER,deleteUserSaga);\r\n  \r\n}\r\n","import { fork } from 'redux-saga/effects';\r\nimport watchActions from './watchers';\r\n\r\nexport default function* startForman() {\r\n  yield fork(watchActions);\r\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from '../reducers';\r\nimport rootSaga from '../sagas/Start.saga';\r\nimport logger from 'redux-logger'\r\n\r\nexport let store;\r\n//THIS RUNS ONLY ONCE WHE THE COMPONENTS ARE MOUNTED ???\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  //declare a saga middleware for handle the async call to the API\r\n\r\n  store = \r\n    createStore(\r\n      rootReducer,\r\n      compose(\r\n        applyMiddleware(sagaMiddleware,logger),\r\n        //@ts-ignore\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n      );\r\n  //I add a step over here to see how the state of the store is return\r\n  let newStateStore = {\r\n    ...store,\r\n    runSaga: sagaMiddleware.run(rootSaga)\r\n  }\r\n  return newStateStore;\r\n    //root reducer contains all the reducers,\r\n    // aplly middleware declare that the requests has to go trought this middleware\r\n    // and runs the middleware saga\r\n  \r\n};\r\n\r\nexport default configureStore;","import React from 'react';\r\nimport { CardTitle } from 'reactstrap';\r\nimport { IUserListItem } from '../../reducers/state.models';\r\nimport './UserInfoCard.scss'\r\n\r\ninterface myProps{\r\n    user:IUserListItem\r\n}\r\nconst UserInfoCard = (props:myProps) => {\r\n    return (\r\n        <>\r\n            <div color=\"primary \" className=\"infoCard w-100 mt-5 row\">\r\n                <div className=\"infoItem col\">\r\n                    <CardTitle className= 'lead text-primary'>Username:</CardTitle>\r\n                    <p>{props.user.userName}</p>\r\n                </div>\r\n                <div className=\"infoItem col\">\r\n                    <CardTitle className= 'lead text-primary'>Name:</CardTitle>\r\n                    <p>{props.user.firstName} {props.user.lastName}</p>\r\n                </div>\r\n                <div className=\"infoItem col\">\r\n                    <CardTitle className= 'lead text-primary'>Email:</CardTitle>\r\n                    <p> {props.user.email} </p>\r\n                </div>\r\n                <div className=\"infoItem col\">\r\n                    <CardTitle className= 'lead text-primary'>Role:</CardTitle>\r\n                    <p>{(props.user.role && props.user.role.role) || 'role not found'} </p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UserInfoCard\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {IStoreState} from '../../reducers/state.models'\r\nimport UserInfoCard from './UserInfoCard';\r\n\r\n\r\nclass UserInfo extends Component<any,any>  {\r\n    componentDidMount(){\r\n        console.log('component did mount::', this.props)\r\n        if(this.props.loginState.isAuthenticated){\r\n            console.log('component did mount::', this.props)\r\n        }else{\r\n            console.log(`i'm not authenticated`)\r\n            localStorage.removeItem('loginUser')\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('component update');\r\n        \r\n        if(this.props.loginState.isAuthenticated){\r\n            console.log('component did mount::', this.props)\r\n        }else{\r\n            console.log(`i'm not authenticated`)\r\n            localStorage.removeItem('loginUser')\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n    render() {\r\n        let {user} = this.props.loginState\r\n\r\n        console.log(user)\r\n        return (\r\n            <>\r\n                <UserInfoCard user={user}/>\r\n               \r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state:IStoreState) =>{\r\n    //console.log('this  is the state::' , state);\r\n    return {\r\n        loginState :state.loginState,\r\n        \r\n    };\r\n}\r\n//@ts-ignore\r\nexport default connect(mapStateToProps)(UserInfo)","import React, { Component } from 'react'\r\nimport { IReimbursement, IStoreState } from '../../../reducers/state.models';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport './ResolverButton.scss'\r\nimport classnames from 'classnames';\r\nimport { connect } from 'react-redux';\r\nimport { updatePendingReimbursementStatus } from '../../../actions/reimbursements.actions';\r\n\r\ninterface MyProps {\r\n    reimbursement:IReimbursement,\r\n    action:string,\r\n    statusToChange:number,\r\n    color :string,\r\n    updatePendingReimbursementStatus:(reimbursement:IReimbursement)=>{}\r\n    \r\n}\r\n class ResolveButton extends Component <MyProps,any>{\r\n    state = {\r\n        modal:false\r\n    }\r\n    toggle = () =>{\r\n        this.setState(prevState => ({\r\n          modal: !prevState.modal\r\n        }));\r\n      }\r\n    changeState=(e)=>{\r\n        e.preventDefault();\r\n        console.log('im gonna change this reimbursement to::', this.props.statusToChange,\r\n                                                                this.props.action,\r\n                                                                this.props.reimbursement                        \r\n        );\r\n        let newReimbursment:IReimbursement = this.props.reimbursement;\r\n        newReimbursment.status_id= this.props.statusToChange;\r\n        this.props.updatePendingReimbursementStatus(newReimbursment)\r\n        // this.toggle();\r\n\r\n\r\n      }\r\n    render() {\r\n        const {action} = this.props;\r\n\r\n        return (\r\n            <>\r\n                <i onClick={this.toggle} className={classnames(\"fas\",[\r\n                                                    {'fa-thumbs-up':this.props.statusToChange==2},\r\n                                                    {'fa-thumbs-down':this.props.statusToChange==3},\r\n                                                    {'text-success':this.props.color=='success'},\r\n                                                    {'text-danger':this.props.color=='danger'},\r\n                                                    ])}></i>\r\n                <Modal isOpen={this.state.modal} fade={false} toggle={this.toggle}>\r\n            <ModalHeader className= 'text-primary' toggle={this.toggle}>{action} Reimbursement</ModalHeader>\r\n            <ModalBody>\r\n                <form  onSubmit={this.changeState} className=' p-3'>\r\n\r\n                    <div className= 'd-flex justify-content-center mb-2'>\r\n                        <label className='my-3 lead text-center' htmlFor=\"warning \">Are you sure you want to {this.props.action} this Reimbursement?</label>\r\n                    </div>\r\n                    \r\n                    <br/>\r\n                    <div className='w-100 d-flex justify-content-around'>\r\n                        <Button type='submit' color={action=='Approve'? \"success\":'warning'} >{action}</Button>\r\n                        <Button  onClick={this.toggle} color=\"primary\" >Cancel</Button>\r\n                    </div>\r\n                    \r\n\r\n\r\n                </form>\r\n                \r\n            </ModalBody>\r\n          </Modal>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\nexport const mapDispatchProps = {\r\n    updatePendingReimbursementStatus\r\n\r\n}\r\nconst mapStateToProps = (state:IStoreState) =>{\r\n    return {\r\n\r\n    };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchProps)(ResolveButton)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { IStoreState, IReimbursement, ILoginState } from '../../reducers/state.models';\r\nimport {Table,Spinner, Button} from 'reactstrap';\r\nimport { getReimbursementsByStatus } from '../../actions/reimbursements.actions';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport ResolveButton from './resolverButton/ResolveButton';\r\n\r\n\r\ninterface MyProps extends RouteComponentProps{\r\n    loginState:ILoginState,\r\n    reimbursementsPendingListState:IReimbursement[],\r\n    getReimbursementsByUser:(id:number)=>void\r\n    \r\n}\r\n\r\n\r\nclass PendingReimbursements extends Component<any,MyProps> {\r\n    componentDidMount(){\r\n        if(this.props.loginState.isAuthenticated){\r\n            let userId:number = this.props.loginState.userId;\r\n            console.log('component did mount::', this.props)\r\n            this.props.getReimbursementsByStatus(1)\r\n        }else{\r\n            console.log(`i'm not authenticated`)\r\n            localStorage.removeItem('loginUser')\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('esto es updated::',this.props)\r\n    }\r\n    render() {\r\n        let list:any;\r\n            if (this.props.reimbursementsPendingListState[0]){\r\n                console.log('ready to print',[...this.props.reimbursementsPendingListState]) \r\n                list = [...this.props.reimbursementsPendingListState].map((r:IReimbursement)=>\r\n                    (<tr key = {r.reimbursement_id}>\r\n                        <td>{r.author_name}</td>\r\n                        <td>{r.submitted_date && r.submitted_date.substr(0,10)}</td>\r\n                        <td>{r.description}</td>\r\n                        <td>{r.type}</td>\r\n                        <td>{r.amount}</td>\r\n                        <td>{r.status}</td>\r\n                        <td className=\"d-flex justify-content-around\">\r\n                            <ResolveButton reimbursement = {r} action='Approve' statusToChange={2} color = 'success' />\r\n                            <ResolveButton reimbursement = {r} action='Denied' statusToChange={3} color = 'danger' />    \r\n                        </td>\r\n                    </tr>)\r\n                )\r\n            }\r\n        return (\r\n            <div className='mt-5'>\r\n            <h4 className='display-4'>Pending Reimbursements</h4>\r\n\r\n            <div className='w-100 d-flex flex-row-reverse my-4'>\r\n            </div>\r\n           <Table striped>\r\n                <thead>\r\n                <tr>\r\n                    <th>Author</th>\r\n                    <th>Submitted</th>\r\n                    <th>Description</th>\r\n                    <th>Type</th>\r\n                    <th>Amount</th>\r\n                    <th>Status</th>\r\n                    <th>Action</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {(this.props.reimbursementsPendingListState[0] && list ) || (<tr><td colSpan={7} className=\"text-center\" ><Spinner color=\"success\" /></td></tr>) \r\n                    }\r\n                </tbody>\r\n            </Table>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport const mapDispatchProps = {\r\n    getReimbursementsByStatus\r\n\r\n}\r\nconst mapStateToProps = (state:IStoreState) =>{\r\n    return {\r\n        loginState:state.loginState,\r\n        reimbursementsPendingListState: state.reimbursementsPendingListState,\r\n        messages:state.messageState\r\n\r\n    };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchProps)(PendingReimbursements);\r\n ","import React, { Component } from 'react'\r\nimport { History } from 'history';\r\nimport {IReimbursmentUserState, IStoreState } from '../../reducers/state.models';\r\nimport { connect } from 'react-redux';\r\nimport { setReimbursementUser } from '../../actions/reimbursements.actions';\r\n\r\ninterface myProps {\r\n    user:IReimbursmentUserState\r\n    userId:number,\r\n    history:History\r\n    setReimbursementUser:(user:IReimbursmentUserState)=>{}\r\n}\r\nclass ShowReimbursmentsByUserId extends Component <myProps,any>{\r\n\r\nredirect = ()=>{\r\n    this.props.setReimbursementUser(this.props.user)\r\n   this.props.history.push(`/reimbursements/${this.props.userId}`)\r\n}\r\n    render() {\r\n        return (\r\n            <>\r\n                <i onClick={this.redirect} className=\"text-success fas fa-file-invoice-dollar fa-2x\"></i>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport const mapDispatchToProps = {\r\n    setReimbursementUser,\r\n};\r\nconst mapStateToProps = (state:IStoreState) =>{\r\n    return { \r\n    };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ShowReimbursmentsByUserId)\r\n","import React, { Component } from 'react'\r\nimport { IReimbursmentUserState } from '../../reducers/state.models';\r\nimport ShowReimbursmentsByUserId from './ShowReimbursmentsByUserId';\r\nimport { History } from 'history';\r\n\r\ninterface myProps {\r\n    \r\n    user:IReimbursmentUserState\r\n    history:History\r\n\r\n}\r\nexport default class UserRecordWithReimbursement extends Component<myProps,any> {\r\n\r\n    render() {\r\n        const \r\n            {id,\r\n            userName,\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            role} = this.props.user;\r\n        return (\r\n            <>\r\n                <tr>\r\n                    <td>{userName}</td>\r\n                    <td>{firstName}</td>\r\n                    <td>{lastName}</td>\r\n                    <td>{email}</td>\r\n                    <td>{role.role}</td>\r\n                    <td className='d-flex justify-content-center'><ShowReimbursmentsByUserId user= {this.props.user} userId={id} history={this.props.history} /></td>\r\n                </tr>\r\n\r\n\r\n            </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { getAllUsers } from '../../actions/userList.actions';\r\nimport { IStoreState, IUserListItem, ILoginState } from '../../reducers/state.models';\r\nimport {Table,Spinner} from 'reactstrap';\r\nimport UserRecordWithReimbursement from './UserRecordWithReimbursement';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { History } from 'history';\r\n\r\ninterface Myprops extends RouteComponentProps {\r\n    usersListState:IUserListItem[],\r\n    loginState: ILoginState,\r\n    getAllUsers:()=>{},\r\n    history:History\r\n\r\n}\r\n\r\nclass ReimbursementByUser extends Component<Myprops,any>{\r\n    \r\n    componentDidMount(){\r\n        console.log('reimbursement component mount::', this.props)\r\n        if(this.props.loginState.isAuthenticated){\r\n            this.props.getAllUsers();\r\n        }else{\r\n            console.log(`i'm not authenticated`)\r\n            localStorage.removeItem('loginUser')\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('component update');\r\n        \r\n        if(this.props.loginState.isAuthenticated){\r\n            console.log('component did mount::', this.props)\r\n        }else{\r\n            console.log(`i'm not authenticated`)\r\n            localStorage.removeItem('loginUser')\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n\r\n\r\nrender() {\r\n        let list:any;\r\n        if (this.props.usersListState[0]){\r\n            list = [...this.props.usersListState].map((u)=>\r\n                (<UserRecordWithReimbursement key ={u.id} user={u} history= {this.props.history} />\r\n                )\r\n            )\r\n        }\r\n\r\n        return (\r\n            //todo: \r\n            \r\n            <div className=\"mt-5\" >\r\n                <p className='display-4 mt-5'>Reimbursements by User</p>\r\n               <Table striped>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Username</th>\r\n                        <th>First Name</th>\r\n                        <th>Last Name</th>\r\n                        <th>Email</th>\r\n                        <th>Role</th>\r\n                        <th>Reimbursements</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {(this.props.usersListState[0] && list ) || (<tr><td colSpan={6} className=\"text-center\" ><Spinner color=\"success\" /></td></tr>) \r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport const mapDispatchToProps = {\r\n    getAllUsers,\r\n};\r\nconst mapStateToProps = (state:IStoreState) =>{\r\n    return { \r\n        usersListState:state.usersListState,\r\n        loginState:    state.loginState\r\n    };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ReimbursementByUser)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps, match } from 'react-router';\r\nimport { ILoginState, IReimbursement, IStoreState, IUserListItem } from '../../reducers/state.models';\r\nimport AddReimbursement from '../reimbursementList/AddReimbursement';\r\nimport { getReimbursementsByUser } from '../../actions/reimbursements.actions';\r\nimport {Table,Spinner} from 'reactstrap';\r\nimport UserInfoCard from '../userInfo/UserInfoCard';\r\n\r\n\r\ninterface MyProps extends RouteComponentProps{\r\n    loginState:ILoginState,\r\n    reimbursementsListState:IReimbursement[],\r\n    getReimbursementsByUser:(id:number)=>void,\r\n    userReimbursementStatus:IUserListItem,\r\n    match:match;\r\n}\r\ninterface myState{\r\n    username :string,\r\n    firstName:string,\r\n    lastName:string,\r\n    email:string,\r\n    role:string\r\n\r\n}\r\nclass ReimbursementsByUserID extends Component <MyProps,any> {\r\n    componentDidMount(){\r\n        if(this.props.loginState.isAuthenticated){\r\n            //@ts-ignore\r\n            let userId:number = this.props.match.params.userId;\r\n            console.log('component did mount::', userId)\r\n            this.props.getReimbursementsByUser(userId)\r\n        }else{\r\n            console.log(`i'm not authenticated`)\r\n            localStorage.removeItem('loginUser')\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('esto es updated::',this.props)\r\n    }\r\nrender() {\r\n    \r\n            let list:any;\r\n            if (this.props.reimbursementsListState[0]){\r\n                console.log('ready to print',[...this.props.reimbursementsListState]) \r\n                list = [...this.props.reimbursementsListState].map((r)=>\r\n                    (<tr key = {r.reimbursement_id}>\r\n                        <td>{r.submitted_date && r.submitted_date.substr(0,10)}</td>\r\n                        <td>{r.description}</td>\r\n                        <td>{r.type}</td>\r\n                        <td>{r.amount}</td>\r\n                        <td>{r.status}</td>\r\n                        <td>{r.resolver_name}</td>\r\n                        <td>{r.resolve_date && r.resolve_date.substr(0,10)}</td>\r\n                    </tr>)\r\n                )\r\n                //const {userName,firstName,lastName,email,role} = this.props.reimbursementsListState[0]\r\n            return (\r\n                \r\n                <div className='mt-5'>\r\n                    <h4 className='display-4'> </h4>\r\n    \r\n                    <div className='w-100 d-flex justify-content-center'>\r\n                        <UserInfoCard  user= {this.props.userReimbursementStatus}  />\r\n                    </div>\r\n                   <Table striped>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Submitted Date</th>\r\n                            <th>Description</th>\r\n                            <th>Type</th>\r\n                            <th>Amount</th>\r\n                            <th>Status</th>\r\n                            <th>Resover Name</th>\r\n                            <th>Resolve Date</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {(this.props.reimbursementsListState[0] && list ) || (<tr><td colSpan={7} className=\"text-center\" ><Spinner color=\"success\" /></td></tr>) \r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n                    \r\n                </div>\r\n            )\r\n            }\r\n            else{\r\n                return(<>No reimbursements for this user</>)\r\n            }\r\n            \r\n    }\r\n}\r\nexport const mapDispatchProps = {\r\n    getReimbursementsByUser\r\n\r\n}\r\nconst mapStateToProps = (state:IStoreState) =>{\r\n    return {\r\n        loginState:state.loginState,\r\n        reimbursementsPendingListState:state.reimbursementsPendingListState,\r\n        reimbursementsListState: state.reimbursementsListState,\r\n        userReimbursementStatus:state.userReimbursementState\r\n\r\n    };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchProps)(ReimbursementsByUserID)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { IStoreState, IPagesReimbursements } from '../../reducers/state.models';\r\nimport {Table,Spinner} from 'reactstrap';\r\n\r\ninterface myProps{\r\n    reimbursmentByPageState:IPagesReimbursements;\r\n}\r\n\r\n\r\nclass ReimbursementPage extends Component <myProps,any>{\r\n    \r\n    render() {\r\n        const {reimbursementList} = this.props.reimbursmentByPageState\r\n        if(!reimbursementList[0]){\r\n            return(<Spinner color=\"success\" />)\r\n        }else{\r\n\r\n            let list = [...reimbursementList].map((r)=>\r\n            (<tr key = {r.reimbursement_id}>\r\n                <td>{r.author_name}</td>\r\n                <td>{r.submitted_date && r.submitted_date.substr(0,10)}</td>\r\n                <td>{r.description}</td>\r\n                <td>{r.type}</td>\r\n                <td>{r.amount}</td>\r\n                <td>{r.status}</td>\r\n                <td>{r.resolver_name}</td>\r\n                <td>{r.resolve_date && r.resolve_date.substr(0,10)}</td>\r\n            </tr>)\r\n        )\r\n\r\n            return (\r\n                <div className='mt-5'>\r\n                    <h4 className='display-4'> </h4>\r\n                   <Table striped>\r\n                        <thead>\r\n                        <tr> \r\n                            <th>Author</th>\r\n                            <th>Submitted Date</th>\r\n                            <th>Description</th>\r\n                            <th>Type</th>\r\n                            <th>Amount</th>\r\n                            <th>Status</th>\r\n                            <th>Resover Name</th>\r\n                            <th>Resolve Date</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {(reimbursementList[0] && list ) || (<tr><td colSpan={5} className=\"text-center\" ><Spinner color=\"success\" /></td></tr>) \r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n       \r\n    }\r\n}\r\nconst mapStateToProps= (state:IStoreState)=>{\r\n    return{\r\n        reimbursmentByPageState: state.reimbursmentByPageState}\r\n\r\n}\r\nexport default connect(mapStateToProps)(ReimbursementPage)\r\n","import React,{Component} from 'react';\r\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\r\nimport { getReimbursementsByPage } from '../../actions/reimbursements.actions';\r\nimport { IStoreState, IPagesReimbursements, ILoginState } from '../../reducers/state.models';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface myProps {\r\n    getReimbursementsByPage:(page:number)=>{},\r\n    loginState:ILoginState,\r\n    reimbursmentByPageState:IPagesReimbursements\r\n}\r\nclass PaginatorController extends Component <myProps,any>{\r\n    componentDidMount(){\r\n        console.log(this.props.reimbursmentByPageState)\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('new prorp for pagionator:::',this.props.reimbursmentByPageState)\r\n    }\r\n  render() {\r\n    const {pageCount,currentPage} = this.props.reimbursmentByPageState;\r\n    if(!pageCount){\r\n      return (<> no controller</>)\r\n    }else{\r\n      let list = [];\r\n\r\n        for(let x=1 ; x<=pageCount;x++){\r\n          list.push(\r\n            \r\n              <PaginationLink key= {x}  onClick={()=>this.props.getReimbursementsByPage(x)}>{x}</PaginationLink>\r\n            \r\n          )\r\n        }\r\n        console.log('this is my list',list)\r\n        return (\r\n          \r\n          <Pagination aria-label=\"Page navigation example\">\r\n             {list}\r\n          </Pagination>\r\n        );\r\n    }\r\n    \r\n  }\r\n}\r\nconst mapDispatchToProps = {\r\n  getReimbursementsByPage\r\n}\r\n\r\nconst mapStateToProps= (state:IStoreState)=>{\r\n  return{\r\n      loginState: state.loginState,\r\n      reimbursmentByPageState: state.reimbursmentByPageState\r\n\r\n  }\r\n\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(PaginatorController)","import React, { Component } from 'react';\r\nimport ReimbursementPage from './ReimbursementPage';\r\nimport { connect } from 'react-redux';\r\nimport { IStoreState, ILoginState, IPagesReimbursements } from '../../reducers/state.models';\r\nimport { getReimbursementsByPage } from '../../actions/reimbursements.actions';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport PaginatorController from './PaginatorController';\r\n\r\ninterface myProps extends RouteComponentProps{\r\n    getReimbursementsByPage:(page:number)=>{},\r\n    loginState:ILoginState,\r\n    reimbursmentByPageState:IPagesReimbursements\r\n}\r\n\r\nclass ReimbursementByPage extends Component <myProps,any>{\r\n    componentDidMount(){\r\n        console.log('reimbursement component mount::', this.props)\r\n        if(this.props.loginState.isAuthenticated){\r\n            this.props.getReimbursementsByPage(1);\r\n        }else{\r\n            console.log(`i'm not authenticated`)\r\n            localStorage.removeItem('loginUser')\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('component update');\r\n        \r\n        if(this.props.loginState.isAuthenticated){\r\n            console.log('component did mount::', this.props)\r\n        }else{\r\n            console.log(`i'm not authenticated`)\r\n            localStorage.removeItem('loginUser')\r\n            this.props.history.push('/')\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n            <p className='display-4 mt-5'>All Reimbursment by Page</p>\r\n                <ReimbursementPage/>\r\n\r\n                <PaginatorController/>\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    getReimbursementsByPage\r\n}\r\n\r\nconst mapStateToProps= (state:IStoreState)=>{\r\n    return{\r\n        loginState: state.loginState,\r\n        reimbursmentByPageState: state.reimbursmentByPageState\r\n\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ReimbursementByPage)","import React, { Component } from 'react';\r\nimport './App.scss'\r\nimport './include/bootstrap'\r\nimport {BrowserRouter, Route,Switch} from 'react-router-dom'\r\n\r\n//Components\r\nimport Login from './containers/login/Login';\r\nimport UsersList from './components/userList/UsersList';\r\nimport Header from './components/header/Header';\r\nimport ReimbursementsList from './components/reimbursementList/ReimbursementsList';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from './store/configureStore';\r\nimport UserInfo from './components/userInfo/UserInfo';\r\nimport PendingReimbursements from './components/reimbursementsByStatus/PendingReimbursements';\r\nimport ReimbursementByUser from './components/reimbursementByUser/ReimbursementByUser';\r\nimport ReimbursementsByUserID from './components/reimbursementByUser/ReimbursementsByUserID';\r\nimport ReimbursementByPage from './components/reimbursementByPage/ReimbursementByPage';\r\n\r\n\r\nclass App extends Component<any,any> {\r\n  componentDidMount(){\r\n    console.log('app mounted')\r\n    console.log('app props:: ',this.props)\r\n  }\r\n  render() {\r\n    const store = configureStore();\r\n    return (\r\n      <Provider store={store} >\r\n          <BrowserRouter basename=\"/reimbursmentFrontEnd\" >\r\n           <Header />\r\n          <div className=\"container\">\r\n              \r\n              <Switch>\r\n                  <Route exact path=\"/\" component = { Login }/>\r\n                  <Route exact path=\"/reimbursements\" component = { ReimbursementsList }/>\r\n                  <Route path = \"/reimbursements/pending\" component = {PendingReimbursements}/>\r\n                  <Route path = \"/reimbursements/users\" component = {ReimbursementByUser}/>\r\n                  <Route path = \"/reimbursements/:userId\" component = {ReimbursementsByUserID}/>\r\n                  <Route path = \"/all/reimbursements\" component = {ReimbursementByPage}/>\r\n                  <Route path= \"/myinfo\" component = {UserInfo} />\r\n                  <Route path =\"/users\" component = {UsersList}/>\r\n                  \r\n\r\n                  <Route path=\"/\" component = { () => <h1>not found</h1> }/>\r\n              </Switch> \r\n          </div>\r\n             \r\n          </BrowserRouter> \r\n        \r\n        </Provider>\r\n    \r\n    );\r\n  }\r\n}\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/scss/bootstrap.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport axios from 'axios';\n\n//@ts-ignore\n axios.interceptors.request.use( (req) =>{\n    console.log(req);\n     return req\n    })\n// axios.interceptors.response.use( (res) =>{\n//     console.log('this is the response::',res);\n//     return res\n    \n// })\n\nReactDOM.render(<App />,document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.2dd6b4ff.webp\";"],"sourceRoot":""}